##
## SPDX-License-Identifier: BSD-3-Clause
## Copyright (c) 2025 Rene W. Olsen
## Target OS: AmigaOS
##

import os
import shlex  # Handles quoted strings properly

STUBS_DIR = 'src_libc/gen-stubs'
REGISTRY = 'src_libc/reg_stubs.txt'

os.makedirs(STUBS_DIR, exist_ok=True)

HEADER = '''\

/*
** SPDX-License-Identifier: BSD-3-Clause
** Copyright (c) 2025 Rene W. Olsen
**
** AUTO-GENERATED struct PrivFile â€” DO NOT EDIT MANUALLY
** Generated by gen_stubs.py
*/

#include "Stub.h"
'''

# Map interface function prefixes to standard headers
INCLUDE_MAP = {
    "assert_":  'assert.h',
    'fcntl_':   'fcntl.h',
    'ctype_':   'ctype.h',
    'stdlib_':  'stdlib.h',
    'stdio_':   'stdio.h',
    'string_':  'string.h',
    'strings_': 'strings.h',
    'setjmp_':  'setjmp.h',
    'unistd_':  'unistd.h',
    'math_d_':  'math.h',
}

def deduce_header(iface_func: str):
    for prefix, header in INCLUDE_MAP.items():
        if iface_func.startswith(prefix):
            return f'#include <{header}>'
    return None

def sanitize_args_call(args_call: str) -> str:
    """
    Remove any accidental leading Self/IAmyCLib from args_call,
    since the LIBC_STUB macro injects IAmyCLib itself.
    """
    parts = [p.strip() for p in args_call.split(',') if p.strip()]
    if parts and parts[0] in ('Self', 'IAmyCLib'):
        parts = parts[1:]
    return ', '.join(parts)

def format_args_decl(args_decl: str) -> str:
    """
    For empty declarations, emit (void) to avoid old-style prototypes.
    Otherwise wrap as (args_decl).
    """
    args_decl = args_decl.strip()
    return '(void)' if not args_decl else f'({args_decl})'

with open(REGISTRY) as f:
    for raw_line in f:
        line = raw_line.strip()
        if not line or line.startswith("#"):
            continue

        try:
            parts = shlex.split(line)
        except ValueError:
            print(f"Skipping line due to parse error: {line}")
            continue

        if len(parts) < 5:
            print(f"Skipping invalid line: {line}")
            continue

        ret, name, iface_func, args_call, args_decl = parts[:5]

        args_call = sanitize_args_call(args_call.strip())
        decl_text = format_args_decl(args_decl)

        filename = os.path.join(STUBS_DIR, f"{name}.c")
        header_include = deduce_header(iface_func)

        with open(filename, 'w') as out:
            out.write(HEADER)
            if header_include:
                out.write(f"{header_include}\n")
            out.write("\n")

            # Variadic: must use the VARARGS macro (fixed args go in call_fixed)
            if "..." in args_decl:
                # call_fixed must not include __VA_ARGS__. Just the named fixed args before '...'.
                call_fixed = args_call  # already sanitized
                if call_fixed:
                    out.write(
                        f"LIBC_STUB_VARARGS({ret}, {name}, {iface_func},\n"
                        f"    {decl_text},\n"
                        f"    {call_fixed});\n"
                    )
                else:
                    # Unusual: no fixed args before '...'
                    out.write(
                        f"LIBC_STUB_VARARGS({ret}, {name}, {iface_func},\n"
                        f"    {decl_text},\n"
                        f"    );\n"
                    )
            else:
                # Non-variadic: if there are no call args, do not emit the extra comma
                if args_call:
                    out.write(
                        f"LIBC_STUB({ret}, {name}, {iface_func},\n"
                        f"    {decl_text},\n"
                        f"    {args_call});\n"
                    )
                else:
                    # No-arg function: invoke macro without the variadic argument position
                    out.write(
                        f"LIBC_STUB({ret}, {name}, {iface_func},\n"
                        f"    {decl_text}\n"
                        f");\n"
                    )

        print(f"Generated: {filename}")
